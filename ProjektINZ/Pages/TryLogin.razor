@layout LoginLayout
@inject ILocalStorageService localStorage
@inject NavigationManager navMenager
@inject AuthenticationStateProvider AuthStateProvider
@using KlalorieOnline.Models.Dtos
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserService UserService
@using ProjektINZ.Services.Contracts
@using ProjektINZ.ViewModels
@page "/trylogin"

<EditForm Model="userModel" OnSubmit="HandleLogin">
<section class="vh-100 gradient-custom">
    <div class="container py-5 h-100">
    <div class="row d-flex justify-content-center align-items-center h-100">
      <div class="col-12 col-md-8 col-lg-6 col-xl-5">
        <div class="card bg-dark text-white" style="border-radius: 1rem;">
          <div class="card-body p-5 text-center">

            <div class="mb-md-5 mt-md-4 pb-5">

              <h2 class="fw-bold mb-2 text-uppercase">Login</h2>
              <p class="text-white-50 mb-5">Please enter your login and password!</p>

              <div class="form-outline form-white mb-4">
                  <label class="form-label" for="typeEmailX">Login</label>
                <InputText id="UserName" class="form-control" placeholder="UserName"
                       @bind-Value="userModel.Name" />
                
              </div>

              <div class="form-outline form-white mb-4">
                  <label class="form-label" for="typePasswordX">Password</label>
                 <InputText id="UserPassword"  type="password" class="form-control" placeholder="UserPassword"
                       @bind-Value="userModel.Password" />
                
              </div>

              @if(ErrorMesage=="error")  
                    {  
                        <div class="alert alert-danger" role="alert">    
                            Wrong password or username!    
                            </div>     

                    }  

             

              <button class="btn btn-outline-light btn-lg px-5" type="submit">Login</button>

              <div class="d-flex justify-content-center text-center mt-4 pt-1">
                <a href="#!" class="text-white"><i class="fab fa-facebook-f fa-lg"></i></a>
                <a href="#!" class="text-white"><i class="fab fa-twitter fa-lg mx-4 px-2"></i></a>
                <a href="#!" class="text-white"><i class="fab fa-google fa-lg"></i></a>
              </div>

            </div>

            <div>
              <p class="mb-0">Don't have an account? <a href="trysignup" class="text-white-50 fw-bold">Sign Up</a>
              </p>
            </div>

          </div>
        </div>
      </div>
    </div>
  </div>
</section>
</EditForm>

@code {



    private UserModel userModel = new UserModel();
    public string ErrorMesage { get; set; }

    public string alertMessage { get; set; }
    private UserDto userDto { get; set; }
   

    public NavigationManager NavigationManager { get; set; }

    private async void HandleLogin()
    {


        try
        {
            userDto = await UserService.GetUser(userModel.Name);

        }


        catch (Exception ex)
        {

            alertMessage = ex.Message;
            //ErrorMesage = "error";
        }


        if (userDto != null)
        {
            //var userDataDto = await UserService.GetUser(userModel.Name);
            if(userModel.Password==userDto.UserPassword)

            {
                await localStorage.SetItemAsync<string>("username",userDto.UserName);
                await localStorage.SetItemAsync<int>("userID", userDto.Id);
                
                
                await AuthStateProvider.GetAuthenticationStateAsync();
                navMenager.NavigateTo("/");
            }
            else
            {
                ErrorMesage = "error";

                await OnInitializedAsync();
               

            }
            await OnInitializedAsync();

        }
        else
        {
            
            ErrorMesage = "error";
                  await  OnInitializedAsync();
                 
                }

       
    }

    protected override async Task OnInitializedAsync()
    {
        //userModel = new UserModel();
        await base.OnInitializedAsync();

    }

   
    


    }
